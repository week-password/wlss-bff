"""This script cleans up GitHub old workflow runs for commits rewritten by force pushes of the branch.

We are using rebaase strategy for git branches and each feature branch at the end of the work is rebased at the
last version of develop branch and contains only one commit with description of what has been done for this feature.
When developers work with their feature branches they push a lot of "work in progress" commits, and each push triggers
GitHub workflow run. But since all of these commits will be rewritten at the end we want to keep our workflow runs list
clean and remove previous runs that were triggered by commits that don't exist after rebase.

This script is supposed to be run in GitHub workflow, which will provide environment variables we need.
"""

import os

from github import Github


GITHUB_REF_NAME = os.environ["GITHUB_REF_NAME"]  # ref name of the current branch, for example: `feature-branch-1``
GITHUB_REPOSITORY = os.environ["GITHUB_REPOSITORY"]  # the owner and repository name, for example: 'octocat/Hello-World'
GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]  # unique secret to authenticate in a workflow run, generated by GitHub


def main():
    repository = Github(GITHUB_TOKEN).get_repo(GITHUB_REPOSITORY)
    branch_commit_hashes = set(get_branch_commits(repository))
    for run in repository.get_workflow_runs(branch=GITHUB_REF_NAME):
        if run.head_sha not in branch_commit_hashes:
            run.delete()


def get_branch_commits(repository):
    """Get hashes of current branch commits not merged to develop."""
    base_branch = repository.get_branch("develop")
    current_branch = repository.get_branch(GITHUB_REF_NAME)
    branch_comparison = repository.compare(base_branch.commit.sha, current_branch.commit.sha)
    for commit in branch_comparison.commits:
        yield commit.sha


if __name__ == "__main__":
    main()
